[gd_scene load_steps=3 format=3 uid="uid://fbk7sxto6rte"]

[ext_resource type="PackedScene" uid="uid://ducw4rcae7wjl" path="res://Models/Mobs/Bobo.blend" id="1_oh8bj"]

[sub_resource type="GDScript" id="GDScript_g5kdw"]
script/source = "@tool
extends Node3D

@export_range(0.0, 1.0) var blend_open: float = 0
@onready var head: MeshInstance3D = $Armature/Skeleton3D/Head
@export_tool_button(\"Blink\") var blinking = blink
@export_tool_button(\"Yawn\") var yawning = yawn
@export_tool_button(\"Attack\") var attacking = attack
@export_tool_button(\"Munch\") var munching = munch.bind(3)

func blink() -> void:
	var tween = create_tween()
	tween.set_ease(Tween.EASE_IN_OUT)
	tween.set_trans(Tween.TRANS_SINE)
	tween.tween_property(head, \"blend_shapes/Blink\", 1.0, 0.1)
	tween.tween_interval(0.04)
	
	tween.set_ease(Tween.EASE_OUT)
	tween.set_trans(Tween.TRANS_BACK)
	tween.tween_property(head, \"blend_shapes/Blink\", 0.0, 0.2)

func yawn() -> void:
	var tween = create_tween()
	tween.set_ease(Tween.EASE_IN_OUT)
	tween.set_trans(Tween.TRANS_SINE)
	
	# Close eyes partially during yawn
	tween.tween_property(head, \"blend_shapes/Blink\", 0.8, 0.5)
	
	# Start opening mouth in parallel with eyes
	tween.parallel().tween_property(head, \"blend_shapes/Mouth\", 0.5, 0.8)
	tween.parallel().tween_property(head, \"blend_shapes/Nose\", 1.0, 0.8)
	tween.parallel().tween_property(head, \"blend_shapes/Sad\", 1.0, 0.8)
	
	# Hold the yawn for a moment
	tween.tween_interval(0.4)
	
	# Close mouth gradually
	tween.tween_property(head, \"blend_shapes/Mouth\", 0.0, 0.7)
	
	# Open eyes fully after mouth is mostly closed
	tween.parallel().tween_property(head, \"blend_shapes/Blink\", 0.0, 0.4)
	tween.parallel().tween_property(head, \"blend_shapes/Nose\", 0.0, 0.4)
	tween.parallel().tween_property(head, \"blend_shapes/Sad\", 0.0, 0.4)
	
func attack() -> void:
	var tween = create_tween()
	tween.set_ease(Tween.EASE_IN_OUT)
	tween.set_trans(Tween.TRANS_SINE)
	
	# Initial show anger
	tween.tween_property(head, \"blend_shapes/Blink\", 0.3, 0.15)
	tween.parallel().tween_property(head, \"blend_shapes/Anger\", 1.0, 0.15)
	tween.parallel().tween_property(head, \"blend_shapes/Nose\", 0.5, 0.15)
	
	# Anticipation
	tween.tween_property(head, \"blend_shapes/Stretch\", 0.6, 0.1)
	
	# Mouth opens AFTER the anticipation
	tween.tween_property(head, \"blend_shapes/Mouth\", 1.0, 0.1)
	
	# ATTACK - with squish
	var attack_tween = tween.parallel()
	attack_tween.set_trans(Tween.TRANS_BACK)
	attack_tween.set_ease(Tween.EASE_OUT)
	attack_tween.tween_property(head, \"blend_shapes/Squish\", 1.0, 0.08)
	
	# Hold open
	tween.tween_interval(0.1)
	
	# Close mouth quickly and hold
	tween.tween_property(head, \"blend_shapes/Mouth\", 0.0, 0.1)
	tween.tween_interval(0.05)
	
	# Return from squish with elastic bounce
	var bounce_tween = tween.chain()
	bounce_tween.set_trans(Tween.TRANS_BACK)
	bounce_tween.set_ease(Tween.EASE_OUT)
	bounce_tween.tween_property(head, \"blend_shapes/Squish\", 0.0, 0.25)
	
	# Reset expressions
	tween.tween_interval(0.2)
	tween.tween_property(head, \"blend_shapes/Stretch\", 0.0, 0.2)
	tween.parallel().tween_property(head, \"blend_shapes/Anger\", 0.0, 0.3)
	tween.parallel().tween_property(head, \"blend_shapes/Nose\", 0.0, 0.3)
	tween.parallel().tween_property(head, \"blend_shapes/Blink\", 0.0, 0.3)

func munch(repeat_count: int = 3) -> void:
	var tween = create_tween()
	tween.set_ease(Tween.EASE_IN_OUT)
	tween.set_trans(Tween.TRANS_SINE)
	
	# Start with happy expression
	tween.tween_property(head, \"blend_shapes/Happy\", 1.0, 0.3)
	tween.tween_interval(0.15)
	
	# Repeat the munching cycle
	for i in range(repeat_count):
		# Open mouth
		var open_tween = tween.chain()
		open_tween.tween_property(head, \"blend_shapes/Mouth\", 0.1, 0.15)
		open_tween.tween_property(head, \"blend_shapes/Stretch\", 0.2, 0.15)
		tween.tween_interval(0.08)
		
		# Close mouth with squish (impact)
		var close_tween = tween.parallel()
		close_tween.tween_property(head, \"blend_shapes/Mouth\", 0.0, 0.1)
		tween.tween_property(head, \"blend_shapes/Stretch\", 0.0, 0.1)
		
		# Close Squish
		var squish_tween = tween.parallel()
		squish_tween.tween_property(head, \"blend_shapes/Squish\", 0.2, 0.05)
		
		# Hold the closed mouth squish position briefly
		tween.tween_interval(0.05)
		
		# Release squish gradually
		tween.tween_property(head, \"blend_shapes/Squish\", 0.0, 0.15)
		
		# Pause between munches
		tween.tween_interval(0.1)
	
	# Finish with satisfied expression
	tween.set_trans(Tween.TRANS_BACK)
	tween.set_ease(Tween.EASE_OUT)
	tween.tween_property(head, \"blend_shapes/Happy\", 0.0, 0.2)  # Reduce happy expression
	tween.tween_property(head, \"blend_shapes/Happy\", 0.0, 0.2)  # Fade out happy expression


func _process(_delta: float) -> void:
	pass
	#head.set_blend_shape_value(head.find_blend_shape_by_name(\"Mouth\"), blend_open)
	#head.set_blend_shape_value(head.find_blend_shape_by_name(\"Blink\"), blend_open)
"

[node name="Bobo2" instance=ExtResource("1_oh8bj")]
script = SubResource("GDScript_g5kdw")

[node name="Skeleton3D" parent="Armature" index="0"]
bones/0/position = Vector3(0.452229, 0.0799623, 0.620583)
bones/0/rotation = Quaternion(0.560258, 0.0245497, -0.00567791, 0.827935)
bones/1/position = Vector3(-0.433232, 0.0391568, -0.0224387)
bones/1/rotation = Quaternion(0.740998, -0.0213703, -0.018945, 0.6709)
bones/2/position = Vector3(0.452602, 0.0800377, -0.142755)
bones/2/rotation = Quaternion(0.562241, 0.0245632, -0.00561907, 0.826589)
bones/3/position = Vector3(-0.436721, 0.0845109, -0.596039)
bones/3/rotation = Quaternion(0.741153, -0.0213917, -0.0189695, 0.670727)
bones/4/position = Vector3(0.210433, 0.0513852, -1.70221)
bones/4/rotation = Quaternion(-0.707107, 4.88443e-18, 4.88443e-18, 0.707107)
bones/5/rotation = Quaternion(1, 2.27192e-28, -1.19209e-07, -2.98023e-08)
bones/6/position = Vector3(-1.9463e-08, 0.950803, 0.274487)
bones/6/rotation = Quaternion(-0.716395, -0.0485857, 0.0523162, 0.694033)
bones/7/rotation = Quaternion(0.982535, 0.0032752, 0.0113972, 0.185701)
bones/11/rotation = Quaternion(-0.934189, 0.018772, 0.0556986, 0.351902)
bones/12/rotation = Quaternion(0.42959, 0.000529926, 0.0487068, 0.901709)
bones/13/rotation = Quaternion(-0.829094, 0.0104727, -0.0563496, 0.556164)
bones/14/rotation = Quaternion(-0.748431, 0.121959, 0.0875635, 0.645995)
bones/15/rotation = Quaternion(0.58692, -0.000474194, -0.0665447, 0.806906)
bones/16/rotation = Quaternion(-0.954592, -0.065748, 0.00180458, 0.290567)
bones/17/rotation = Quaternion(-0.1068, -0.0293033, -0.0407942, 0.993011)
bones/22/rotation = Quaternion(-0.890676, -0.0852616, 0.102197, 0.43472)
bones/23/rotation = Quaternion(0.556848, 0.000125767, 0.146841, 0.817532)
bones/24/rotation = Quaternion(-0.886554, 0.0941522, -0.0830406, 0.445266)
bones/25/rotation = Quaternion(-0.528195, 0.0380801, 0.0342497, 0.847577)
bones/26/rotation = Quaternion(0.162647, 6.783e-09, -2.03389e-08, 0.986684)
bones/27/rotation = Quaternion(0.326309, 1.1363e-09, 7.18033e-08, 0.945263)
bones/28/rotation = Quaternion(0.225586, -2.65969e-10, 8.07444e-08, 0.974223)
bones/29/rotation = Quaternion(-0.77845, 0.134848, 0.288949, 0.540685)
bones/30/rotation = Quaternion(0.76769, -9.36464e-05, -0.20244, 0.608005)
bones/31/rotation = Quaternion(-0.964928, -0.113147, -0.0106184, 0.23664)

[node name="Head" parent="Armature/Skeleton3D" index="1"]
blend_shapes/Happy = 1.0
